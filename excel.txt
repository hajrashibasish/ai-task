#!/usr/bin/env bash
set -euo pipefail
PROJECT_ROOT="/app1/ingestion/wgpt-etl"
PACKAGE_DIR="/app1/ingestion/veracode_package"
ZIP_FILE="/app1/ingestion/wgpt-etl-veracode.zip"

need(){ command -v "$1" >/dev/null 2>&1 || { echo "Missing $1"; exit 1; }; }
need pipenv; need rsync; need zip

cd "$PROJECT_ROOT"
rm -f "$ZIP_FILE"; rm -rf "$PACKAGE_DIR" .venv venv .pytest_cache __pycache__ */__pycache__ || true
pip cache purge >/dev/null 2>&1 || true

# Build env from requirements so Pipfile reflects the same pins
pipenv --rm >/dev/null 2>&1 || true
pipenv install -r requirements.txt

# Try normal lock, then retry with --pre (for beta builds like azure-search==1.0.0b2)
set +e
pipenv lock --clear -v
rc=$?
if [ $rc -ne 0 ]; then
  echo "⚠️ pipenv lock failed. Retrying with --pre to allow pre-releases…"
  pipenv lock --clear --pre -v
  rc=$?
fi
set -e
[ $rc -eq 0 ] || { echo "❌ pipenv lock still failing. Run: pipenv graph --reverse | less"; exit 2; }

# Quick version assertion
pipenv run python - <<'PY'
import importlib.metadata as m, sys
from packaging.version import Version
def ver(p): 
    try: return Version(m.version(p))
    except m.PackageNotFoundError: return None
bad=[]
if not ver("h11") or ver("h11")<Version("0.16.0"): bad.append("h11>=0.16.0")
if not ver("httpcore") or ver("httpcore")<Version("1.0.0"): bad.append("httpcore>=1.0.0")
if not ver("httpx") or ver("httpx")<Version("0.28.0"): bad.append("httpx>=0.28.0")
if bad:
    print("ERROR: Version policy not satisfied:", ", ".join(bad)); sys.exit(2)
PY

# Package code + BOTH manifests
mkdir -p "$PACKAGE_DIR"
rsync -av --delete \
  --exclude='*.md' --exclude='*.html' --exclude='*.pptx' --exclude='*.xlsx' \
  --exclude='*.log' --exclude='*.pyc' --exclude='*.pyo' --exclude='*.pdf' \
  --exclude='*.jpg' --exclude='__pycache__/' --exclude='.pytest_cache/' \
  --exclude='.venv/' --exclude='venv/' --exclude='.git/' --exclude='.gitignore' \
  "$PROJECT_ROOT/" "$PACKAGE_DIR/"

cp "$PROJECT_ROOT/requirements.txt" "$PACKAGE_DIR/"
cp "$PROJECT_ROOT/Pipfile.lock"     "$PACKAGE_DIR/"

cd "$PACKAGE_DIR"
zip -qr "$ZIP_FILE" .
echo "✅ Veracode STAT scan zip created at: $ZIP_FILE"


pipenv graph --reverse | egrep -i 'h11|httpx|httpcore|azure-search|beta|b[0-9]'

