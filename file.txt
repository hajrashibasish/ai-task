############################################
# test_01_downloadfiles.py (Mocked Unit Test - Initial 2 Cases)
############################################

import pytest
from unittest.mock import patch, MagicMock, mock_open
import os
import importlib.util
import json
import builtins

# ---- Helper to Patch and Load Target Module ----
def load_downloadfiles_module():
    module_path = os.path.join(os.path.dirname(__file__), "../../bin/01_downloadfiles.py")
    spec = importlib.util.spec_from_file_location("downloadfiles", module_path)
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)
    return module

# ---- TEST CASE 1: load_doc_id_map ----
@patch("builtins.open", new_callable=mock_open, read_data='{"http://example.com": {"DOC_ID": "X123"}}')
@patch("os.path.exists", return_value=True)
def test_load_doc_id_map_exists(mock_exists, mock_open_file):
    module = load_downloadfiles_module()
    result = module.load_doc_id_map("/mock/log", "en")
    assert result == {"http://example.com": {"DOC_ID": "X123"}}

@patch("os.path.exists", return_value=False)
def test_load_doc_id_map_missing(mock_exists):
    module = load_downloadfiles_module()
    result = module.load_doc_id_map("/mock/log", "fr")
    assert result == {}
