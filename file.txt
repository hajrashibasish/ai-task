import pytest
from unittest.mock import MagicMock, patch
from datetime import datetime

import importlib.util

def load_delta_module():
    spec = importlib.util.spec_from_file_location("delta_module", "bin/03_check_delta_files.py")
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)
    return module

def test_process_check_delta_files_returns_urls():
    module = load_delta_module()
    dummy_output = {"internal": {"en": [{"url": "http://example.com"}]}}
    mock_db = MagicMock()

    with patch.object(module.DocumentList, "get_urls_by_hash", return_value=dummy_output):
        result = module.process_check_delta_files("internal", "en", mock_db, "etl")
        assert result == dummy_output

def test_update_document_change_history_inserts_and_updates():
    module = load_delta_module()
    mock_db = MagicMock()
    hash_changes = {
        123: {"old_hash": "abc", "new_hash": "def"},
        456: {"old_hash": None, "new_hash": "ghi"},  # should be skipped
    }

    module.update_document_change_history(mock_db, hash_changes, etl_schema="etl")

    # Validate INSERT and UPDATE queries were called
    assert mock_db.executeQuery.call_count >= 3




def test_load_file_download_meta_json():
    import json
    from unittest.mock import mock_open, patch

    dummy_data = {"http://example.com/sample.pdf": {"url": "http://example.com/sample.pdf", "hash_256": "abc123"}}
    mock_data = json.dumps(dummy_data)

    with patch("builtins.open", mock_open(read_data=mock_data)):
        with open("/tmp/file_download_meta.json", "r") as f:
            loaded_data = json.load(f)

    assert isinstance(loaded_data, dict)
    assert "http://example.com/sample.pdf" in loaded_data
