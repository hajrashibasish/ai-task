def test_download_files_orchestration():
    module = load_downloadfiles_module()

    mock_urls = {
        "internal": {
            "en": {
                "http://example.com/file1.pptx": {"doc_type": "pptx", "doc_id": "PPT1"},
                "http://example.com/file2.xlsx": {"doc_type": "xlsx", "doc_id": "XLS2"},
                "http://example.com/file3.txt": {"doc_type": "txt", "doc_id": "TXT3"}
            }
        }
    }

    fake_config = {
        "processing": {"output_dir": "/tmp", "log_dir": "/tmp"},
        "sql_db": {"etl_schema": "etl"},
        "document_scopes": {"classification": ["internal"], "language": ["en"]},
        "max_url_retries": 3
    }

    # ðŸ”§ PATCH read_config in the exact module context
    with patch.object(module.Utilities, "read_config", return_value=fake_config), \
         patch("os.makedirs"), \
         patch("builtins.open", mock_open(read_data="{}")), \
         patch.object(module, 'load_doc_id_map', return_value={}), \
         patch.object(module, 'retrieve_url_list', return_value=mock_urls), \
         patch.object(module, 'process_ppt_entry') as mock_ppt, \
         patch.object(module, 'process_xlsx_entry') as mock_xlsx, \
         patch("WGPT.MetadataProcessing.save_metadata") as mock_save_text, \
         patch("WGPT.MetadataProcessing.save_metadata_binary") as mock_save_binary, \
         patch("WGPT.MetadataProcessing.set_failure") as mock_fail, \
         patch("os.path.getsize", return_value=123), \
         patch("KMAI.ingestion.DocumentRetrieval.retrieve", return_value={
             "http://example.com/file3.txt": {
                 "path": "/tmp/file3.txt",
                 "type": "text",
                 "status": "success",
                 "doc_id": "TXT3"
             }
         }):

        module.download_files("internal", "en", MagicMock())

        assert mock_ppt.called
        assert mock_xlsx.called
        assert mock_save_text.called or mock_save_binary.called
        mock_fail.assert_not_called()
