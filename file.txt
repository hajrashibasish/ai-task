def test_assign_default_doc_id_inline():
    entry = {"url": "http://example.com/sample.pdf"}  # no doc_id

    # Simulate the logic of assign_doc_id
    if "doc_id" not in entry:
        extension = entry["url"].split(".")[-1].split("?")[0]
        entry["doc_id"] = f"{extension.upper()}_{hash(entry['url']) % 100000}"

    assert "doc_id" in entry
    assert entry["doc_id"].startswith("PDF_")


def test_process_documents_inline():
    dummy_list = [
        {"url": "http://example.com/file.xlsx", "doc_id": "XLSX123", "doc_type": "xlsx"},
        {"url": "http://example.com/file.pptx", "doc_id": "PPT123", "doc_type": "ppt"}
    ]

    # Simulate dispatch logic from process_documents
    result = {"xlsx": [], "ppt": []}
    for entry in dummy_list:
        doc_type = entry.get("doc_type", "").lower()
        if doc_type == "xlsx":
            result["xlsx"].append(entry["doc_id"])
        elif doc_type == "ppt":
            result["ppt"].append(entry["doc_id"])

    assert result["xlsx"] == ["XLSX123"]
    assert result["ppt"] == ["PPT123"]


def test_post_process_inline():
    doc_map = {
        "xlsx": [{"doc_id": "XLS456", "blob_path": "some_path", "doc_type": "xlsx"}]
    }

    # Simulate flattening logic of post_process
    output = []
    for doc_type, docs in doc_map.items():
        for entry in docs:
            output.append({
                "doc_id": entry["doc_id"],
                "blob_path": entry.get("blob_path", ""),
                "doc_type": doc_type
            })

    assert isinstance(output, list)
    assert output[0]["doc_id"] == "XLS456"
