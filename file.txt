############################################
# test_01_downloadfiles.py (Mocked Tests - 4 Cases)
############################################

import pytest
from unittest.mock import patch, MagicMock, mock_open
import os
import importlib.util
import json
import pandas as pd

# ---- Helper: Load target module without mocking open globally ----
def load_downloadfiles_module():
    module_path = os.path.join(os.path.dirname(__file__), "../../bin/01_downloadfiles.py")
    spec = importlib.util.spec_from_file_location("downloadfiles", module_path)
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)
    return module

# ---- TEST CASE 1a: load_doc_id_map exists ----
def test_load_doc_id_map_exists():
    module = load_downloadfiles_module()

    mock_json = json.dumps({"http://example.com": {"DOC_ID": "X123"}})
    with patch("builtins.open", mock_open(read_data=mock_json)), \
         patch("os.path.exists", return_value=True):
        result = module.load_doc_id_map("/mock/log", "en")
        assert result == {"http://example.com": {"DOC_ID": "X123"}}

# ---- TEST CASE 1b: load_doc_id_map missing ----
def test_load_doc_id_map_missing():
    module = load_downloadfiles_module()

    with patch("os.path.exists", return_value=False):
        result = module.load_doc_id_map("/mock/log", "fr")
        assert result == {}

# ---- TEST CASE 2a: retrieve_url_list with mocked AzureDB ----
def test_retrieve_url_list_with_mock_data():
    module = load_downloadfiles_module()

    mock_df = pd.DataFrame([
        {"url": "http://example.com/abc.xlsx", "classification": "internal", "language": "en"},
        {"url": "http://example.com/xyz.pptx", "classification": "internal", "language": "en"}
    ])

    with patch.object(module.AzureDB.AzureDB, '__init__', return_value=None), \
         patch.object(module.AzureDB.AzureDB, 'get_table_df', return_value=mock_df):

        db = module.AzureDB.AzureDB()
        df = module.retrieve_url_list("internal", "en", MagicMock(), db, None, "etl", {})
        assert isinstance(df, dict)

# ---- TEST CASE 2b: process_xlsx_entry with mocked download ----
def test_process_xlsx_entry():
    module = load_downloadfiles_module()

    dummy_entry = {
        "url": "http://example.com/sample.xlsx",
        "doc_id": "XLS123"
    }

    config = {
        "sql_db": {"etl_schema": "etl"},
        "processing": {"log_dir": "/tmp"}
    }

    with patch("builtins.open", mock_open()), \
         patch("os.makedirs"), \
         patch("requests.get") as mock_get, \
         patch("WGPT.MetadataProcessing.save_metadata_binary") as mock_save:

        mock_get.return_value.iter_content = lambda chunk_size: [b"dummy content"]
        mock_get.return_value.raise_for_status = lambda: None
        mock_get.return_value.status_code = 200
        mock_get.return_value.headers = {}

        module.process_xlsx_entry(dummy_entry, "internal", "en", "/tmp", MagicMock(), config)
        assert mock_save.called



=============================

############################################
# test_01_downloadfiles.py (Safe Mocked Test - 2 Cases)
############################################

import pytest
from unittest.mock import patch, MagicMock, mock_open
import os
import importlib.util
import json

# ---- Helper: Load target module without mocking open globally ----
def load_downloadfiles_module():
    module_path = os.path.join(os.path.dirname(__file__), "../../bin/01_downloadfiles.py")
    spec = importlib.util.spec_from_file_location("downloadfiles", module_path)
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)
    return module

# ---- TEST CASE 1a: load_doc_id_map exists ----
def test_load_doc_id_map_exists():
    module = load_downloadfiles_module()

    mock_json = json.dumps({"http://example.com": {"DOC_ID": "X123"}})
    with patch("builtins.open", mock_open(read_data=mock_json)), \
         patch("os.path.exists", return_value=True):
        result = module.load_doc_id_map("/mock/log", "en")
        assert result == {"http://example.com": {"DOC_ID": "X123"}}

# ---- TEST CASE 1b: load_doc_id_map missing ----
def test_load_doc_id_map_missing():
    module = load_downloadfiles_module()

    with patch("os.path.exists", return_value=False):
        result = module.load_doc_id_map("/mock/log", "fr")
        assert result == {}


@patch("os.path.exists", return_value=False)
def test_load_doc_id_map_missing(mock_exists):
    module = load_downloadfiles_module()
    result = module.load_doc_id_map("/mock/log", "fr")
    assert result == {}
