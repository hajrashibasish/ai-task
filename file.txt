def test_assign_default_doc_id_getattr():
    module = load_downloadfiles_module()
    assign_doc_id = getattr(module, "assign_doc_id")
    entry = {"url": "http://example.com/sample.pdf"}  # no doc_id
    assign_doc_id(entry)
    assert "doc_id" in entry
    assert entry["doc_id"].startswith("PDF_")


def test_dispatch_processor_calls_getattr():
    module = load_downloadfiles_module()
    process_documents = getattr(module, "process_documents")

    dummy_list = [
        {"url": "http://example.com/file.xlsx", "doc_id": "XLSX123", "doc_type": "xlsx"},
        {"url": "http://example.com/file.pptx", "doc_id": "PPT123", "doc_type": "ppt"},
    ]
    config = {
        "processing": {"download_dir": "/tmp", "log_dir": "/tmp"},
        "sql_db": {"etl_schema": "etl"},
        "max_url_retries": 2
    }

    with patch("builtins.open", mock_open(read_data=b"dummy")), \
         patch("os.makedirs"), \
         patch("os.path.getsize", return_value=123), \
         patch("requests.get") as mock_get, \
         patch("WGPT.MetadataProcessing.save_metadata_binary") as mock_save:

        mock_get.return_value.iter_content = lambda chunk_size: [b"dummy"]
        mock_get.return_value.raise_for_status = lambda: None
        mock_get.return_value.status_code = 200
        mock_get.return_value.headers = {}

        result = process_documents(dummy_list, "internal", "en", "/tmp", MagicMock(), config)
        assert result["xlsx"] == ["XLSX123"]
        assert result["ppt"] == ["PPT123"]


def test_post_process_success_path_getattr():
    module = load_downloadfiles_module()
    post_process = getattr(module, "post_process")

    doc_map = {
        "xlsx": [{"doc_id": "XLS456", "blob_path": "some_path", "doc_type": "xlsx"}]
    }
    result = post_process(doc_map, "internal", "en", "/tmp")
    assert isinstance(result, list)
    assert result[0]["doc_id"] == "XLS456"
