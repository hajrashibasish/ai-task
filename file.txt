def test_process_entry_with_unsupported_type():
    module = load_downloadfiles_module()
    dummy_entry = {
        "url": "http://example.com/sample.abc",
        "doc_id": "UNK999"
    }

    fake_config = {
        "processing": {
            "download_dir": "/tmp",
            "log_dir": "/tmp"
        },
        "sql_db": {
            "etl_schema": "etl"
        },
        "max_url_retries": 2
    }

    with patch("os.makedirs"), \
         patch("builtins.open", mock_open(read_data=b"dummy")), \
         patch("requests.get") as mock_get:

        mock_get.return_value.iter_content = lambda chunk_size: [b"dummy"]
        mock_get.return_value.raise_for_status = lambda: None
        mock_get.return_value.status_code = 200
        mock_get.return_value.headers = {}

        try:
            # simulate internal dispatch logic for unsupported file type
            if dummy_entry["url"].endswith(".abc"):
                pass  # no processor, expected behavior is skip silently
        except Exception as e:
            assert False, f"Unsupported file type caused failure: {e}"


def test_invalid_url_download_skipped():
    module = load_downloadfiles_module()
    dummy_entry = {
        "url": "ftp://invalid-url.com/sample.pdf",
        "doc_id": "INV999"
    }

    try:
        module.process_xlsx_entry(dummy_entry, "internal", "en", "/tmp", MagicMock(), {})
    except Exception as e:
        assert False, f"Invalid URL raised error: {e}"


def test_empty_url_skipped():
    module = load_downloadfiles_module()
    dummy_entry = {
        "url": "",
        "doc_id": "EMPTY001"
    }

    try:
        module.process_xlsx_entry(dummy_entry, "internal", "en", "/tmp", MagicMock(), {})
    except Exception as e:
        assert False, f"Empty URL raised error: {e}"
