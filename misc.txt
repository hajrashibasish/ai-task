import pytest
from unittest.mock import MagicMock, patch
from importlib import import_module

@pytest.fixture
def load_module():
    # Import and return the generate_metajson script
    mod = import_module("generate_metajson")
    return mod

def test_generate_meta_json_success(load_module):
    # Patch all external dependencies used in the main script
    with patch.object(load_module, "WGPT") as mock_wgpt, \
         patch.object(load_module, "AzureDB") as mock_azuredb, \
         patch.object(load_module, "AzureADLS") as mock_adls, \
         patch.object(load_module, "DocumentList") as mock_document_list:

        # Setup mock for config
        mock_config = {
            "sql_db": {
                "server_name": "test_server",
                "db_name": "test_db",
                "etl_schema": "etl",
            },
            "credentials": {
                "object_id": "test_obj_id",
                "client_id": "test_client_id"
            },
            "adls_storage": {
                "storage_account": "test_account",
                "container_names": {"en": "test-container"},
                "target_directory_metadata": {"en": "test/target"},
                "archive_directory_metadata": {"en": "test/archive"}
            },
            "processing": {
                "log_dir": "/tmp"
            },
            "document_scopes": {
                "language": ["en"]
            }
        }
        mock_wgpt.Utilities.read_config.return_value = mock_config

        # Setup AzureDB context manager
        mock_db = MagicMock()
        mock_azuredb.return_value.__enter__.return_value = mock_db

        # Setup DocumentList and generate_metajson return
        mock_dl_instance = MagicMock()
        mock_dl_instance.generate_metajson.return_value = {
            "mock_key": {"url": "http://mock"}
        }
        mock_document_list.return_value = mock_dl_instance

        # Setup AzureADLS instance and return empty listing
        mock_adls_instance = MagicMock()
        mock_adls_instance.getDirectoryListing.return_value = []
        mock_adls.return_value = mock_adls_instance

        # Run the script — main logic is inside top-level block
        # We simply import the module and let it execute
        import_module("generate_metajson")

        # ✅ Assertion: Check that generate_metajson was called
        assert mock_dl_instance.generate_metajson.call_count == 1
