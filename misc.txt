#!/usr/bin/env python3
"""
touch_adls_files.py
Standalone script to create/touch blank files in ADLS source feed container
for testing purposes.
"""

import json
from azure.identity import ManagedIdentityCredential
from azure.storage.filedatalake import DataLakeServiceClient

# --- CONFIGURATION (can hardcode or load JSON) ---
CONFIG_FILE = "wgpt-etl-dev.json"

# Hardcoded test dates for the files
TEST_DATES = ["20250812", "20250813", "20250814"]  # 3 fictitious dates

FILES_TO_TOUCH = [
    "internal_urllistFr_",
    "internal_urllist_",
    "public_urllistFr_",
    "public_urllist_"
]

# ------------------

def load_config(file_path):
    with open(file_path, "r") as f:
        return json.load(f)

class AdlsHelper:
    def __init__(self, storage_account, client_id=None):
        self.account_name = storage_account
        self.client_id = client_id
        self._connect()
    
    def _connect(self):
        credential = ManagedIdentityCredential(client_id=self.client_id) if self.client_id else ManagedIdentityCredential()
        self.service_client = DataLakeServiceClient(
            f"https://{self.account_name}.dfs.core.windows.net",
            credential=credential
        )

    def touch_file(self, container_name, file_name):
        file_system_client = self.service_client.get_file_system_client(container_name)
        file_client = file_system_client.get_file_client(file_name)
        try:
            file_client.create_file()
            print(f"Touched file: {file_name}")
        except Exception as e:
            print(f"Failed to touch {file_name}: {e}")


def main():
    config = load_config(CONFIG_FILE)
    storage_account = config["adls_storage"]["storage_account"]
    container_name = config["adls_storage"]["container_names"]["feed"]
    client_id = config["credentials"].get("client_id")

    adls = AdlsHelper(storage_account, client_id)

    # Loop through files and dates
    for base_name in FILES_TO_TOUCH:
        for date in TEST_DATES:
            file_name = f"{base_name}{date}.xlsx"
            adls.touch_file(container_name, file_name)

if __name__ == "__main__":
    main()
