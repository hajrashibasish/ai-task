import pytest
from unittest.mock import patch, MagicMock, mock_open
import os
import json

@pytest.fixture
def load_module(import_module):
    return import_module("generatemetajson", os.path.abspath(__file__))

mock_config = {
    "sql_db": {
        "server_name": "mock_server",
        "db_name": "mock_db",
        "etl_schema": "mock_schema"
    },
    "credentials": {
        "object_id": "mock_object_id",
        "client_id": "mock_client_id"
    },
    "adls_storage": {
        "storage_account": "mock_storage",
        "container_names": {"en": "mock_container", "fr": "mock_container"},
        "target_directory_metadata": {"en": "mock/target", "fr": "mock/target"},
        "archive_directory_metadata": {"en": "mock/archive", "fr": "mock/archive"}  # ✅ Added this
    },
    "processing": {
        "log_dir": "/mock/logs"
    },
    "document_scopes": {
        "language": ["en", "fr"]
    }
}

@pytest.fixture
def mock_read_config(load_module):
    with patch.object(load_module.WGPT.Utilities, "read_config", return_value=mock_config):
        yield

def test_generate_meta_json_main_success(mock_read_config, load_module):
    with patch.object(load_module, "AzureDB") as mock_azure_db, \
         patch.object(load_module, "AzureADLS") as mock_adls, \
         patch.object(load_module, "DocumentList") as mock_document_list, \
         patch("builtins.open", new_callable=mock_open), \
         patch("json.dump"), \
         patch("os.rename"), \
         patch("os.path.basename", side_effect=lambda x: x.split("/")[-1]), \
         patch("os.path.dirname", side_effect=lambda x: os.path.split(x)[0]), \
         patch.dict(os.environ, {
             "KMAI_VERSION": "1.0.1",
             "PROJECT_REPO": "project_repo",
             "KMAI_REPO": "kmai_repo",
             "ROOT_DIR": "/test"
         }, clear=True):

        # Setup AzureDB return
        mock_db = mock_azure_db.return_value.__enter__.return_value

        # Setup DocumentList mock
        mock_dl = mock_document_list.return_value
        mock_dl.generate_metajson.return_value = {
            "doc1": {"url": "http://mock"}
        }

        # Setup AzureADLS mock
        mock_adls_inst = mock_adls.return_value
        mock_adls_inst.getDirectoryListing.return_value = [
            {"name": "mock/target/metadata-en-old.json"}
        ]

        # Run
        load_module.main()

        # ✅ Assert generate_metajson called for "en" and "fr"
        assert mock_dl.generate_metajson.call_count == 2

        # ✅ Assert ADLS archive handled
        assert mock_adls_inst.getDirectoryListing.call_count == 2
        assert mock_adls_inst.upload_blob.call_count >= 2  # includes final upload
        assert mock_adls_inst.file_remove.call_count >= 1
