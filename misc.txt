import sys
import os
import pytest
from unittest.mock import patch, MagicMock
import json
from datetime import datetime

# Adjust sys.path to import your main script
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../../../bin")))

from metadata_processing import MetadataProcessing


@pytest.fixture
def load_module():
    """Fixture to instantiate MetadataProcessing."""
    return MetadataProcessing()

def mock_requests_get(results):
    """Helper to create a mocked requests.get returning specific JSON results."""
    mock_response = MagicMock()
    mock_response.content = json.dumps({"results": results}).encode('utf-8')
    return mock_response

def test_retrieve_page_metadata_en(load_module):
    with patch("requests.get") as mock_get:
        mock_get.return_value = mock_requests_get([
            {"key": "Doc ID:", "value": "<span>12345</span>"},
            {"key": "Content Category:", "value": "Category1"}
        ])
        
        result = load_module.retrieve_page_metadata(docId="12345", language="en")
        
        assert result["results"][0]["value"] == "12345"
        assert result["results"][1]["value"] == "Category1"
        mock_get.assert_called_once()

def test_save_metadata_manual_en(load_module):
    with patch.object(load_module, "save_metadata_en") as mock_en, \
         patch.object(load_module, "save_metadata_fr") as mock_fr:
        
        mock_db = MagicMock()
        file_info = {"feed_source": "manual"}
        
        load_module.save_metadata(url="url", language="en", doc_id="id", title="title", file_info=file_info, db=mock_db, etl_schema=None)
        mock_en.assert_called_once()
        mock_fr.assert_not_called()

def test_save_metadata_manual_fr(load_module):
    with patch.object(load_module, "save_metadata_en") as mock_en, \
         patch.object(load_module, "save_metadata_fr") as mock_fr:
        
        mock_db = MagicMock()
        file_info = {"feed_source": "manual"}
        
        load_module.save_metadata(url="url", language="fr", doc_id="id", title="title", file_info=file_info, db=mock_db, etl_schema=None)
        mock_fr.assert_called_once()
        mock_en.assert_not_called()

def test_save_metadata_xml_calls_feed_method(load_module):
    with patch.object(load_module, "save_metadata_feed") as mock_feed:
        mock_db = MagicMock()
        file_info = {"feed_source": "xml"}
        load_module.save_metadata(url="url", language="en", doc_id="id", title="title", file_info=file_info, db=mock_db, etl_schema=None)
        mock_feed.assert_called_once()

@patch("requests.get")
def test_save_metadata_feed_success(mock_get, load_module):
    mock_db = MagicMock()
    mock_get.return_value = mock_requests_get([
        {"key": "Content Category:", "value": "Category1"},
        {"key": "Content Owner:", "value": "Owner1"},
        {"key": "Last Edited By:", "value": "Editor1"},
    ])

    file_info = {"path": "/path/file", "sha256_hash": "hash", "status": "success", "type": "text"}
    load_module.save_metadata_feed(url="https://example.com", language="en", doc_id="docid", title="title",
                                   file_info=file_info, db=mock_db, etl_schema="etl",
                                   filename_key="filename_key", doc_md_document_id="doc_md_document_id")
    mock_db.execute_update.assert_called_once()

@patch("requests.get")
def test_save_metadata_feed_failure(mock_get, load_module):
    mock_db = MagicMock()
    mock_get.return_value = mock_requests_get([])  # empty results
    
    file_info = {"path": "/path/file", "sha256_hash": "hash", "status": "failed", "message": "error"}
    load_module.save_metadata_feed(url="https://example.com", language="en", doc_id="docid", title="title",
                                   file_info=file_info, db=mock_db, etl_schema="etl",
                                   filename_key="filename_key", doc_md_document_id="doc_md_document_id")
    mock_db.execute_update.assert_called_once()

@patch("requests.get")
@patch("locale.setlocale")
def test_save_metadata_fr_text(mock_setlocale, mock_get, load_module):
    mock_db = MagicMock()
    mock_get.return_value = mock_requests_get([
        {"key": "Cat&eacute;gorie de contenu :", "value": "Cat√©gorie1"},
        {"key": "Propri&eacute;taire du contenu :", "value": "Owner1"},
    ])

    file_info = {"path": "/path/file.txt", "type": "text"}
    load_module.save_metadata_fr(url="url", language="fr", doc_id="id", title="title", file_info=file_info, db=mock_db, etl_schema="etl")
    mock_db.execute_update.assert_called_once()

@patch("requests.get")
@patch("locale.setlocale")
def test_save_metadata_fr_binary(mock_setlocale, mock_get, load_module):
    mock_db = MagicMock()
    mock_get.return_value = mock_requests_get([])  # empty results

    file_info = {"path": "/path/file.pdf", "type": "binary"}
    load_module.save_metadata_fr(url="url", language="fr", doc_id="id", title="title", file_info=file_info, db=mock_db, etl_schema="etl")
    mock_db.execute_update.assert_called_once()

@patch("requests.get")
def test_save_metadata_en_text(mock_get, load_module):
    mock_db = MagicMock()
    mock_get.return_value = mock_requests_get([
        {"key": "Content Category:", "value": "Cat1"},
        {"key": "Content Owner:", "value": "Owner1"},
        {"key": "Last Edited By:", "value": "Editor1"},
        {"key": "Last Updated:", "value": "Jan 01, 2023"},
        {"key": "Expiration Date:", "value": "Dec 31, 2023"},
    ])

    file_info = {"path": "/path/file.txt", "type": "text", "status": "success"}
    load_module.save_metadata_en(url="url", language="en", doc_id="id", title="title", file_info=file_info, db=mock_db, etl_schema="etl")
    mock_db.execute_update.assert_called_once()

@patch("requests.get")
def test_save_metadata_en_binary(mock_get, load_module):
    mock_db = MagicMock()
    mock_get.return_value = mock_requests_get([
        {"key": "Content Category:", "value": "Cat1"},
        {"key": "Content Owner:", "value": "Owner1"},
        {"key": "Last Edited By:", "value": "Editor1"},
        {"key": "Last Updated:", "value": "Jan 01, 2023"},
        {"key": "Expiration Date:", "value": "Dec 31, 2023"},
    ])

    file_info = {"path": "/path/file.pdf", "type": "binary", "status": "success"}
    load_module.save_metadata_en(url="url", language="en", doc_id="id", title="title", file_info=file_info, db=mock_db, etl_schema="etl")
    mock_db.execute_update.assert_called_once()

def test_set_failure(load_module):
    mock_db = MagicMock()
    file_info = {"message": "Error message"}
    load_module.set_failure(url="url", language="en", doc_id="id", title="title", file_info=file_info, db=mock_db, etl_schema="etl")
    mock_db.execute_update.assert_called_once()
