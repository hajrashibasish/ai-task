############################################
# test_00_load_url_lists.py (Final Mocked Unit Test)
############################################

import pytest
from unittest.mock import MagicMock, patch
import os
import importlib.util
import pandas as pd
from pathlib import Path
import types
import sys

# ---- Helper to Patch and Load Safely ----
def load_module_with_patch():
    base_dir = os.path.expanduser("~/mock_test_env")
    log_dir = os.path.join(base_dir, "log/dir")
    base_files_dir = os.path.join(base_dir, "base/dir")

    Path(log_dir).mkdir(parents=True, exist_ok=True)
    Path(base_files_dir).mkdir(parents=True, exist_ok=True)

    # Create a fake WGPT.Utilities module with read_config attribute mocked
    utilities_module = types.ModuleType("WGPT.Utilities")
    mock_read_config = MagicMock()
    utilities_module.read_config = mock_read_config

    # Patch sys.modules so WGPT.Utilities is our fake module
    with patch.dict("sys.modules", {"WGPT.Utilities": utilities_module}):
        # Setup return value for read_config()
        mock_read_config.return_value = {
            "sql_db": {
                "server_name": "mock_server",
                "db_name": "mock_db",
                "etl_schema": "mock_etl_schema"
            },
            "credentials": {
                "object_id": "mock_object_id"
            },
            "urllist_files": {
                "base_dir": base_files_dir,
                "internal": {
                    "biso_controls": {
                        "starts_with": ["https://internal.example.com"]
                    },
                    "en": [
                        {"filename": "internal_en.xlsx", "level": 1}
                    ],
                    "fr": [
                        {"filename": "internal_fr.xlsx", "level": 2}
                    ]
                },
                "public": {
                    "biso_controls": {
                        "starts_with": ["https://public.example.com"]
                    },
                    "en": [
                        {"filename": "public_en.xlsx", "level": 1}
                    ],
                    "fr": [
                        {"filename": "public_fr.xlsx", "level": 2}
                    ]
                }
            },
            "processing": {
                "log_dir": log_dir
            }
        }

        module_name = "load_url_lists"
        module_path = os.path.join(os.path.dirname(__file__), "../../bin/00_load_url_lists.py")
        spec = importlib.util.spec_from_file_location(module_name, module_path)
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
        return module

# ---- TEST CASE 1: Core Function ----
@patch("pandas.read_excel")
def test_process_urllist_file(mock_read_excel):
    mock_read_excel.return_value = pd.DataFrame([{
        "URL": "https://internal.example.com/doc1",
        "DOC_ID": "ABC123",
        "TYPE": "html",
        "DI": "x",
        "FP": "x",
        "PIA": "",
        "PIC": "x",
        "TDCT": "",
        "PT": ""
    }])

    module = load_module_with_patch()

    mock_db = MagicMock()
    mock_db.execute_insert = MagicMock()

    module.process_urllist_file(
        filename=os.path.expanduser("~/mock_test_env/base/dir/internal_en.xlsx"),
        db=mock_db,
        level=1,
        classification="internal",
        language="en",
        biso_controls=["https://internal.example.com"],
        etl_schema="mock_etl_schema"
    )

    assert mock_db.execute_insert.called

# ---- TEST CASE 2: Main Block Simulation (Improved for Coverage) ----
@patch("pandas.read_excel")
def test_main_block(mock_read_excel, monkeypatch):
    monkeypatch.setenv("KMAI_VERSION", "1.0.3")
    monkeypatch.setenv("KMAI_REPO", "kmai-etl")
    monkeypatch.setenv("PROJECT_REPO", "wgpt-etl")
    monkeypatch.setenv("ROOT_DIR", "/app1/ingestion")

    sys.modules["WGPT.Utilities"] = MagicMock()
    import WGPT

    WGPT.Utilities.read_config.return_value = {
        "sql_db": {
            "server_name": "mock_server",
            "db_name": "mock_db",
            "etl_schema": "mock_etl_schema"
        },
        "credentials": {
            "object_id": "mock_object_id"
        },
        "urllist_files": {
            "base_dir": os.path.expanduser("~/mock_test_env/base/dir"),
            "internal": {
                "biso_controls": {
                    "starts_with": ["https://internal.example.com"]
                },
                "en": [
                    {"filename": "internal_en.xlsx", "level": 1}
                ],
                "fr": [
                    {"filename": "internal_fr.xlsx", "level": 2}
                ]
            },
            "public": {
                "biso_controls": {
                    "starts_with": ["https://public.example.com"]
                },
                "en": [
                    {"filename": "public_en.xlsx", "level": 1}
                ],
                "fr": [
                    {"filename": "public_fr.xlsx", "level": 2}
                ]
            }
        },
        "processing": {
            "log_dir": os.path.expanduser("~/mock_test_env/log/dir")
        }
    }

    mock_read_excel.side_effect = [
        pd.DataFrame([{  # internal/en
            "URL": "https://internal.example.com/doc",
            "DOC_ID": "X123",
            "TYPE": "html",
            "DI": "x", "FP": "", "PIA": "", "PIC": "", "TDCT": "", "PT": ""
        }]),
        Exception("Malformed file"),  # internal/fr
        FileNotFoundError("Missing file"),  # public/en
        pd.DataFrame([])  # public/fr
    ]

    mock_db = MagicMock()
    mock_db.execute_insert = MagicMock()
    mock_db.executeQuery = MagicMock(return_value=[])

    module = load_module_with_patch()

    from KMAI import azure
    monkeypatch.setattr(azure, "AzureDB", lambda server_name, db_name, uid: mock_db)

    module.main()




import WGPT.Utilities  # import the real module first

def load_module_with_patch():
    base_dir = os.path.expanduser("~/mock_test_env")
    log_dir = os.path.join(base_dir, "log/dir")
    base_files_dir = os.path.join(base_dir, "base/dir")

    Path(log_dir).mkdir(parents=True, exist_ok=True)
    Path(base_files_dir).mkdir(parents=True, exist_ok=True)

    # Patch only read_config on the real WGPT.Utilities module
    with patch.object(WGPT.Utilities, "read_config") as mock_read_config:
        mock_read_config.return_value = {
            "sql_db": {
                "server_name": "mock_server",
                "db_name": "mock_db",
                "etl_schema": "mock_etl_schema"
            },
            "credentials": {
                "object_id": "mock_object_id"
            },
            "urllist_files": {
                "base_dir": base_files_dir,
                "internal": {
                    "biso_controls": {
                        "starts_with": ["https://internal.example.com"]
                    },
                    "en": [
                        {"filename": "internal_en.xlsx", "level": 1}
                    ],
                    "fr": [
                        {"filename": "internal_fr.xlsx", "level": 2}
                    ]
                },
                "public": {
                    "biso_controls": {
                        "starts_with": ["https://public.example.com"]
                    },
                    "en": [
                        {"filename": "public_en.xlsx", "level": 1}
                    ],
                    "fr": [
                        {"filename": "public_fr.xlsx", "level": 2}
                    ]
                }
            },
            "processing": {
                "log_dir": log_dir
            }
        }

        module_name = "load_url_lists"
        module_path = os.path.join(os.path.dirname(__file__), "../../bin/00_load_url_lists.py")
        spec = importlib.util.spec_from_file_location(module_name, module_path)
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
        return module

