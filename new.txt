import pytest
from unittest.mock import patch, MagicMock, mock_open
import os


@pytest.fixture
def load_module(import_module):
    """Helper to dynamically import the module with mocked os.environ."""
    return import_module("doc_conversion", os.path.abspath(__file__))


def test_retrieve_url_list(mock_db, load_module):
    mock_read_config = MagicMock(return_value={
        "sql_db": {
            "server_name": "test_server",
            "db_name": "test_db",
            "etl_schema": "etl"
        },
        "credentials": {"object_id": "test_object_id"},
        "document_scopes": {
            "filter_columns": {"key": "value"}
        }
    })

    mock_document_list = MagicMock()
    mock_instance = MagicMock()
    mock_instance.get_urls.return_value = {"url1": "metadata1"}
    mock_document_list.return_value = mock_instance

    with patch.object(load_module, "WGPT") as mock_wgpt, \
         patch.object(load_module, "AzureDB", return_value=mock_db), \
         patch.object(load_module, "DocumentList", mock_document_list):

        mock_wgpt.Utilities.read_config = mock_read_config

        result = load_module.retrieve_url_list("classification", "language", MagicMock(), "etl")

        assert result == {"url1": "metadata1"}

        called_args, called_kwargs = mock_instance.get_urls.call_args
        assert called_args[0]["classification"] == "classification"
        assert called_args[0]["language"] == "language"
        assert called_args[0]["etl_schema"] == "etl"
        assert called_args[0]["active_flag"] == "Y"
        assert called_args[1] is None


@patch("builtins.open", new_callable=mock_open, read_data="<html>sample html</html>")
def test_process_html_to_markdown(mock_file_open, load_module):
    mock_dp = MagicMock()
    mock_dp_instance = MagicMock()
    mock_dp_instance.run_pipeline.return_value = "markdown content"
    mock_dp.return_value = mock_dp_instance

    return_values = {}
    file_path = "/path/to/file.html"
    output_dir = "/output"
    language = "en"

    with patch.object(load_module, "DocumentProcessing", mock_dp):
        result = load_module.process_html_to_markdown(file_path, output_dir, language, return_values)

        assert result["status"] == "Successful"
        assert result["document_length"] == len("markdown content")
        mock_dp_instance.run_pipeline.assert_called_once_with(
            input_data="<html>sample html</html>",
            paragraph=True,
            link=True,
            language=language,
            return_value=return_values
        )


@patch("builtins.open", new_callable=mock_open, read_data="%PDF-1.4 sample content")
def test_process_pdf_to_markdown(mock_file_open, load_module):
    mock_dp = MagicMock()
    mock_dp_instance = MagicMock()
    mock_dp_instance.run_pipeline.return_value = "markdown from pdf"
    mock_dp.return_value = mock_dp_instance

    return_values = {}
    file_path = "/path/to/file.pdf"
    output_dir = "/output"
    language = "en"

    with patch.object(load_module, "DocumentProcessing", mock_dp):
        result = load_module.process_pdf_to_markdown(file_path, output_dir, language, return_values)

        assert result["status"] == "Successful"
        assert result["document_length"] == len("markdown from pdf")
        mock_dp_instance.run_pipeline.assert_called_once_with(
            input_data="%PDF-1.4 sample content",
            paragraph=True,
            link=False,
            language=language,
            return_value=return_values
        )


def test_process_excel_to_markdown(load_module):
    mock_excel = MagicMock()
    mock_instance = MagicMock()
    mock_instance.convert.return_value = "markdown table"
    mock_excel.return_value = mock_instance

    return_values = {}
    file_path = "/some/file.xlsx"
    output_dir = "/output"
    language = "en"

    with patch.object(load_module, "Excel2Markdown", mock_excel):
        result = load_module.process_excel_to_markdown(file_path, output_dir, language, return_values)

        assert result["status"] == "Successful"
        assert result["document_length"] == len("markdown table")
        mock_instance.convert.assert_called_once_with(file_path, language)


def test_process_ppt_to_markdown(load_module):
    mock_ppt = MagicMock()
    mock_instance = MagicMock()
    mock_instance.convert.return_value = "ppt content"
    mock_ppt.return_value = mock_instance

    return_values = {}
    file_path = "/ppt/slides.pptx"
    output_dir = "/output"
    language = "en"

    with patch.object(load_module, "Ppt2Markdown", mock_ppt):
        result = load_module.process_ppt_to_markdown(file_path, output_dir, language, return_values)

        assert result["status"] == "Successful"
        assert result["document_length"] == len("ppt content")
        mock_instance.convert.assert_called_once_with(file_path, language)
